#!/bin/bash
# create_a_g2_vm
#
#   Prerequisite: run create_a_vpc_network_etc before running this

# Function definition
run() {
  COMMAND=$1
  echo "$COMMAND"
  eval $COMMAND
}

print_warning() {
echo ""
echo "For details, refer to 'Create a VM that has attached GPUs' available at:"
echo "  https://cloud.google.com/compute/docs/gpus/create-gpu-vm-accelerator-optimize"
echo ""
echo "Warning: VMs with GPUs can't live migrate, ensure to set the --maintenance-policy=TERMINATE flag."
echo "Otherwise, you'll see the following error."
echo "  ERROR: (gcloud.compute.instances.create) Could not fetch resource:
  # - Instances with guest accelerators do not support live migration."
echo "Note: Secure Boot was disabled to allow the installation or OSs and application incompatible with Secure Boot"
echo "Learn about the limitations at https://cloud.google.com/compute/docs/gpus/create-gpu-vm-accelerator-optimized#g2-standard"
echo ""
}

# https://cloud.google.com/compute/docs/regions-zones
REGION=${1:-us-central1}
echo "REGION=$REGION"
echo "Setting the associated variables automatically..."

INSTANCE_NAME=g2-1xl4-${REGION}
PROJECT_ID=$(gcloud config list --format 'value(core.project)')
if [[ -z "$PROJECT_ID" ]]; then
  echo "PROJECT_ID is empty because the core.project property is not displayed."
  echo "This means that you haven't explicitly set a default project for the gcloud CLI."
  echo "Please set your project by running:"
  echo "  $ gcloud config set project PROJECT_ID"
  echo "To check the PROJECT_ID, go to Google Cloud Console and click Navigation Menu."
  echo "Go to Cloud overview > Dashboard and check Project ID in the Project Info card."
  exit 1
fi

ZONE=a
LOCATION=$REGION-$ZONE
MACHINE_TYPE=g2-standard-96
SUBNET=custom-subnet-${REGION}
TAG_NAME_HTTP=allow-http-${REGION}  # For readability & convenience
TAG_NAME_SSH=allow-ssh-${REGION}    # For readability & convenience
# https://cloud.google.com/compute/docs/accelerator-optimized-machines#g2-standard-vms
GPU_MODEL=nvidia-l4
GPU_COUNT=8
ACCELERATOR=type=$GPU_MODEL,count=$GPU_COUNT

# For a Deep Learning VM image
BOOT_DISK_SIZE=500                  # in GB, It should be at least 40GB
IMAGE_FAMILY=pytorch-latest-gpu
IMAGE_PROJECT=deeplearning-platform-release

# create-disk
USER_TAG=${2:-tkim}
DATA_DISK_NAME=data-disk-$USER_TAG-$LOCATION
DISK_TYPE=pd-standard
DATA_DISK_SIZE=600GB

# Create a VM instance using the created network and subnet
print_warning
run "gcloud compute instances create $INSTANCE_NAME \
--project=$PROJECT_ID \
--zone=$LOCATION \
--machine-type=$MACHINE_TYPE \
--network-interface=network-tier=PREMIUM,stack-type=IPV4_ONLY,subnet=$SUBNET \
--tags=$TAG_NAME_HTTP,$TAG_NAME_SSH \
--accelerator=$ACCELERATOR \
--boot-disk-size=$BOOT_DISK_SIZE \
--image-family=$IMAGE_FAMILY \
--image-project=$IMAGE_PROJECT \
--create-disk=name=$DATA_DISK_NAME,mode=rw,type=$DISK_TYPE,size=$DATA_DISK_SIZE,auto-delete=yes,boot=no \
--metadata="install-nvidia-drive=True,enable-oslogin=true" \
--maintenance-policy=TERMINATE \
--no-shielded-secure-boot"
