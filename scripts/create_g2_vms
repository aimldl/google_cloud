# create_g2_vms
#
#   Prerequisite: run init4hub_vm before running this

# Function definition
run() {
  COMMAND=$1
  echo "$COMMAND"
  eval $COMMAND
}

# https://cloud.google.com/compute/docs/regions-zones
export REGION=${1:-us-central1}
echo "REGION=$REGION"
echo "Setting the associated variables automatically..."

export INSTANCE_NAME=g2-${REGION}
export PROJECT_ID=$(gcloud config list --format 'value(core.project)')
if [[ -z "$PROJECT_ID" ]]; then
  echo "PROJECT_ID is empty because the core.project property is not displayed."
  echo "This means that you haven't explicitly set a default project for the gcloud CLI."
  echo "Please set your project by running:"
  echo "  $ gcloud config set project PROJECT_ID"
  echo "To check the PROJECT_ID, go to Google Cloud Console and click Navigation Menu."
  echo "Go to Cloud overview > Dashboard and check Project ID in the Project Info card."
  exit 1
fi
export SERVICE_ACCOUNT=$(gcloud iam service-accounts list \
    --format='value(email)' \
    --project=$PROJECT_ID \
    --filter='displayName:"My Service Account"')
#export ZONE=$REGION-c
export ZONE=$REGION-a
export MACHINE_TYPE=g2-standard-96
export IMAGE_FAMILY=pytorch-latest-gpu
#export SUBNET=custom-subnetwork-${REGION}
export SUBNET=default
export USER_NAME=tkim
export DEVICE_NAME=$USER_NAME-disk
#export IMAGE_NAME=base-deeplearning-nvidia-1
export IMAGE_FAMILY=pytorch-latest-gpu 
export IMAGE_PROJECT=deeplearning-platform-release
#export IMAGE_NAME=projects/ml-images/global/images/c0-deeplearning-common-gpu-v20230925-debian-11-py310
#export IMAGE_SIZE=200
export DISK_TYPE=projects/injae-sandbox-340804/zones/asia-southeast1-b/diskTypes/pd-balanced
export ACCELERATOR=type=nvidia-l4,count=8
export HOST_PREFIX=$(whoami)
export BUCKET=$PROJECT_ID-TKIM-$REGION
export DATA_RO_DISK=$HOST_PREFIX-data
export WORKER_COUNT=10

export TIMEOUT_SECONDS=300  # Timeout after 5 minutes
export SLEEP_INTERVAL=30    # seconds

# 1. Create a VM instance using the created network and subnet
#    https://cloud.google.com/sdk/gcloud/reference/compute/instances/create
echo ""
run "gcloud compute instances create $INSTANCE_NAME \
--project=$PROJECT_ID \
--service-account=$SERVICE_ACCOUNT \
--zone=$ZONE \
--machine-type=$MACHINE_TYPE \
#--create-disk=auto-delete=yes,boot=yes,device-name=$DEVICE_NAME,image=$IMAGE_NAME,mode=rw,size=$IMAGE_SIZE,type=$DISK_TYPE \
--network-interface=network-tier=PREMIUM,stack-type=IPV4_ONLY,subnet=$SUBNET \
# https://cloud.google.com/deep-learning-vm/docs/images
--image-family=$IMAGE_FAMILY \
--image-project=$IMAGE_PROJECT \
--accelerator=type=$ACCELERATOR \
--metadata="install-nvidia-drive=True" \
--tags=http-server,https-server
#--metadata=enable-oslogin=true \
#--maintenance-policy=TERMINATE \
#--provisioning-model=STANDARD \
#--no-shielded-secure-boot \
#--shielded-vtpm \
#--shielded-integrity-monitoring \
#--labels=goog-ec-src=vm_add-gcloud \
#--reservation-affinity=any \
#--scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append
"

# --network-interface=network-tier=PREMIUM,stack-type=IPV4_ONLY,subnet=$SUBNET \
# ERROR: (gcloud.compute.instances.create) Could not fetch resource:
# - Invalid value for field 'resource.networkInterfaces[0].network': 'https://compute.googleapis.com/compute/v1/projects/llm-env/global/networks/default'. The referenced network resource cannot be found.

# --create-disk=auto-delete=yes,boot=yes,device-name=$DEVICE_NAME,image=$IMANGE_NAME,mode=rw,size=$IMAGE_SIZE,type=$DISK_TYPE \
# ERROR: (gcloud.compute.instances.create) Could not fetch resource:
# - Invalid value for field 'resource.disks[0]': '{  "type": "PERSISTENT",  "mode": "READ_WRITE",  "deviceName": "tkim-disk",  "boot": true,  "initial...'. Boot disk must have a source specified.

exit 1
# 2. Wait
echo "Waiting until ${INSTANCE_NAME} is created..."
start_time=$(date +%s)
while true; do
  # Polling: check the instance status repeatedly until it's created or in the "RUNNING" state
  status=$(gcloud compute instances describe ${INSTANCE_NAME} --zone=${ZONE} --format='get(status)')
  if [[ $status == "RUNNING" ]]; then
    echo "Instance ${INSTANCE_NAME} is created and running"
    break
  fi

  # Timeout: It's good practice to include a timeout to prevent the script from hanging indefinitely if something goes wrong.
  current_time=$(date +%s)
  elapsed_seconds=$(( current_time - start_time ))
  if [[ $elapsed_seconds -gt $TIMEOUT_SECONDS ]]; then
    echo "Timeout waiting for instance creation."
    exit 1
  fi
  sleep $SLEEP_INTERVAL
done

# 3. Connect the VM instance to the firewall rules
#   https://cloud.google.com/sdk/gcloud/reference/compute/instances/add-tags
run "gcloud compute instances add-tags $INSTANCE_NAME \
--tags=$TAG_NAME_HTTP \
--project=$PROJECT_ID \
--zone=$ZONE"

run "gcloud compute instances add-tags $INSTANCE_NAME \
--project=$PROJECT_ID \
--tags=$TAG_NAME_SSH \
--zone=$ZONE"
