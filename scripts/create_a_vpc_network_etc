#!/bin/bash
# create_a_vpc_network_etc
#

# Function definition
run() {
  COMMAND=$1
  echo "$COMMAND"
  eval $COMMAND
}

# https://cloud.google.com/compute/docs/regions-zones
REGION=${1:-us-central1}
echo "REGION=$REGION"
echo "Handling the associated variables automatically..."
PROJECT_ID=$(gcloud config list --format 'value(core.project)')
if [[ -z "$PROJECT_ID" ]]; then
  echo "PROJECT_ID is empty because the core.project property is not displayed."
  echo "This means that you haven't explicitly set a default project for the gcloud CLI."
  echo "Please set your project by running:"
  echo "  $ gcloud config set project PROJECT_ID"
  echo "To check the PROJECT_ID, go to Google Cloud Console and click Navigation Menu."
  echo "Go to Cloud overview > Dashboard and check Project ID in the Project Info card."
  exit 1
fi

NETWORK=custom-vpcnet-${REGION}
SUBNET=custom-subnet-${REGION}
SUBNET_RANGE=10.128.0.0/20
# Example: 10.138.0.0/20, 10.132.0.0/20, 10.128.0.0/20

FIREWALL_NAME_HTTP=allow-http-traffic-${REGION}
TAG_NAME_HTTP=allow-http-${REGION}
FIREWALL_NAME_SSH=allow-ssh-traffic-${REGION}
TAG_NAME_SSH=allow-ssh-${REGION}
FIREWALL_PRIORITY=1000
# IP_RANGE=  # optional

SERVICE_ACCOUNT_NAME=custom-service-account
SECRET_NAME=custom-secret
SERVICE_ACCOUNT_KEY_NAME=custom-key.json

echo ""
echo "Create a network $NETWORK ..."
run "gcloud compute networks create $NETWORK --project $PROJECT_ID --subnet-mode=custom --mtu=1460 --bgp-routing-mode=regional"

echo ""
echo "Create a subnet $SUBNET for the created VPC network ..."
run "gcloud compute networks subnets create $SUBNET \
--project=$PROJECT_ID \
--region=$REGION \
--network=$NETWORK \
--range=$SUBNET_RANGE"

echo ""
echo "Create firewall rules to allow HTTP traffic with a tag"
echo "  * HTTP: tcp:80"
echo "  * tag: allow-http-us-central1"
echo "Note: The tag will be used to connect the firewall to a VM instance after the instance is created."
echo ""
run "gcloud compute firewall-rules create $FIREWALL_NAME_HTTP \
--network=$NETWORK \
--target-tags=$TAG_NAME_HTTP \
--allow=tcp:80 \
--priority=$FIREWALL_PRIORITY"
# --source-ranges=$IP_RANGE  # optional

echo ""
echo "Create firewall rules to allow SSH traffic with a tag"
echo "  * SSH: tcp:2"
echo "  * tag: allow-ssh-us-central1"
echo "Note: The tag will be used to connect the firewall to a VM instance after the instance is created."
echo ""
run "gcloud compute firewall-rules create $FIREWALL_NAME_SSH \
--network=$NETWORK \
--target-tags=$TAG_NAME_SSH \
--allow=tcp:22 \
--priority=$FIREWALL_PRIORITY"
# --source-ranges=$IP_RANGE  # optional

# TODO: if the service account and secret exist already, don't create new ones.

# Create a service account custom-service-account...
# gcloud iam service-accounts create custom-service-account    --project=llm-env     --display-name Custom
# ERROR: (gcloud.iam.service-accounts.create) Resource in projects [llm-env] is the subject of a conflict: Service account custom-service-account already exists within project projects/llm-env.
# - '@type': type.googleapis.com/google.rpc.ResourceInfo
#  resourceName: projects/llm-env/serviceAccounts/custom-service-account@llm-env.iam.gserviceaccount.com

# Create a secret/service account key custom-secret and add the key to Secrete Manager ...
# gcloud secrets create custom-secret    --project=llm-env     --replication-policy=automatic
# ERROR: (gcloud.secrets.create) Resource in projects [llm-env] is the subject of a conflict: Secret [projects/950418483561/secrets/custom-secret] already exists.
# custom-service-account@llm-env.iam.gserviceaccount.com

# TODO: if the service account and secret exist already, don't create new ones.

echo ""
echo "Create a service account $SERVICE_ACCOUNT_NAME..."
run "gcloud iam service-accounts create $SERVICE_ACCOUNT_NAME\
    --project=$PROJECT_ID \
    --display-name "Custom Service Account""
#    --display-name 'Custom Service Account'"  # TODO: Double-check the above change is correct

echo ""
echo "Create a secret/service account key $SECRET_NAME and add the key to Secrete Manager ..."
run "gcloud secrets create $SECRET_NAME\
    --project=$PROJECT_ID \
    --replication-policy=automatic"

# TODO: This the following block after double-checking this is not necessary.
# Get the service account email.
SERVICE_ACCOUNT_EMAIL=$(gcloud iam service-accounts list \
    --format='value(email)' \
    --project=$PROJECT_ID \
    --filter='displayName: Custom Service Account')  # TODO: Fix Custom to "Custom Service Account"
echo $SERVICE_ACCOUNT_EMAIL

# TODO:
# Add the service account as an IAM member to the secret.
